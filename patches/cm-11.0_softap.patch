
project frameworks/base/
diff --git a/frameworks/base/core/java/android/os/INetworkManagementService.aidl b/frameworks/base/core/java/android/os/INetworkManagementService.aidl
index 86f63b1..7b82922 100644
--- a/frameworks/base/core/java/android/os/INetworkManagementService.aidl
+++ b/frameworks/base/core/java/android/os/INetworkManagementService.aidl
@@ -238,17 +238,17 @@ interface INetworkManagementService
     /**
      * Start Wifi Access Point
      */
-    void startAccessPoint(in WifiConfiguration wifiConfig, String iface);
+    void startAccessPoint(in WifiConfiguration wifiConfig, String wlanIface, String softapIface);
 
     /**
      * Stop Wifi Access Point
      */
-    void stopAccessPoint(String iface);
+    void stopAccessPoint(String wlanIface);
 
     /**
      * Set Access Point config
      */
-    void setAccessPoint(in WifiConfiguration wifiConfig, String iface);
+    void setAccessPoint(in WifiConfiguration wifiConfig, String wlanIface, String softapIface);
 
     /**
      ** DATA USAGE RELATED
diff --git a/frameworks/base/services/java/com/android/server/NetworkManagementService.java b/frameworks/base/services/java/com/android/server/NetworkManagementService.java
index 3577d24..5cbee07 100644
--- a/frameworks/base/services/java/com/android/server/NetworkManagementService.java
+++ b/frameworks/base/services/java/com/android/server/NetworkManagementService.java
@@ -1123,7 +1123,7 @@ public class NetworkManagementService extends INetworkManagementService.Stub
 
     @Override
     public void startAccessPoint(
-            WifiConfiguration wifiConfig, String wlanIface) {
+            WifiConfiguration wifiConfig, String wlanIface, String softapIface) {
         mContext.enforceCallingOrSelfPermission(CONNECTIVITY_INTERNAL, TAG);
         try {
             if (mContext.getResources().getBoolean(
@@ -1135,9 +1135,9 @@ public class NetworkManagementService extends INetworkManagementService.Stub
                 mConnector.execute("softap", "start", wlanIface);
             }
             if (wifiConfig == null) {
-                mConnector.execute("softap", "set", wlanIface);
+                mConnector.execute("softap", "set", wlanIface, softapIface);
             } else {
-                mConnector.execute("softap", "set", wlanIface, wifiConfig.SSID,
+                mConnector.execute("softap", "set", wlanIface, softapIface, wifiConfig.SSID,
                                    "broadcast", "6", getSecurityType(wifiConfig),
                                    new SensitiveArg(wifiConfig.preSharedKey));
             }
@@ -1174,6 +1174,7 @@ public class NetworkManagementService extends INetworkManagementService.Stub
         mContext.enforceCallingOrSelfPermission(CONNECTIVITY_INTERNAL, TAG);
         try {
             mConnector.execute("softap", "stopap");
+            mConnector.execute("softap", "stop", wlanIface);
             wifiFirmwareReload(wlanIface, "STA");
         } catch (NativeDaemonConnectorException e) {
             throw e.rethrowAsParcelableException();
@@ -1181,13 +1182,13 @@ public class NetworkManagementService extends INetworkManagementService.Stub
     }
 
     @Override
-    public void setAccessPoint(WifiConfiguration wifiConfig, String wlanIface) {
+    public void setAccessPoint(WifiConfiguration wifiConfig, String wlanIface, String softapIface) {
         mContext.enforceCallingOrSelfPermission(CONNECTIVITY_INTERNAL, TAG);
         try {
             if (wifiConfig == null) {
-                mConnector.execute("softap", "set", wlanIface);
+                mConnector.execute("softap", "set", wlanIface, softapIface);
             } else {
-                mConnector.execute("softap", "set", wlanIface, wifiConfig.SSID,
+                mConnector.execute("softap", "set", wlanIface, softapIface, wifiConfig.SSID,
                                    "broadcast", "6", getSecurityType(wifiConfig),
                                    new SensitiveArg(wifiConfig.preSharedKey));
             }
diff --git a/frameworks/base/wifi/java/android/net/wifi/WifiStateMachine.java b/frameworks/base/wifi/java/android/net/wifi/WifiStateMachine.java
index 8f3c8d3..08bdd2a 100644
--- a/frameworks/base/wifi/java/android/net/wifi/WifiStateMachine.java
+++ b/frameworks/base/wifi/java/android/net/wifi/WifiStateMachine.java
@@ -23,8 +23,13 @@ import static android.net.wifi.WifiManager.WIFI_STATE_ENABLING;
 import static android.net.wifi.WifiManager.WIFI_STATE_UNKNOWN;
 
 /**
- * TODO:
+ * TODO: Add soft AP states as part of WIFI_STATE_XXX
+ * Retain WIFI_STATE_ENABLING that indicates driver is loading
+ * Add WIFI_STATE_AP_ENABLED to indicate soft AP has started
+ * and WIFI_STATE_FAILED for failure
  * Deprecate WIFI_STATE_UNKNOWN
+ *
+ * Doing this will simplify the logic for sending broadcasts
  */
 import static android.net.wifi.WifiManager.WIFI_AP_STATE_DISABLED;
 import static android.net.wifi.WifiManager.WIFI_AP_STATE_DISABLING;
@@ -100,10 +105,13 @@ import java.util.regex.Pattern;
  * Track the state of Wifi connectivity. All event handling is done here,
  * and all changes in connectivity state are initiated here.
  *
- * Wi-Fi now supports three modes of operation: Client, SoftAp and p2p
- * In the current implementation, we support concurrent wifi p2p and wifi operation.
- * The WifiStateMachine handles SoftAp and Client operations while WifiP2pService
- * handles p2p operation.
+ * Wi-Fi now supports three modes of operation: Client, Soft Ap and Direct
+ * In the current implementation, we do not support any concurrency and thus only
+ * one of Client, Soft Ap or Direct operation is supported at any time.
+ *
+ * The WifiStateMachine supports Soft Ap and Client operations while WifiP2pService
+ * handles Direct. WifiP2pService and WifiStateMachine co-ordinate to ensure only
+ * one exists at a certain time.
  *
  * @hide
  */
@@ -112,6 +120,9 @@ public class WifiStateMachine extends StateMachine {
     private static final String NETWORKTYPE = "WIFI";
     private static final boolean DBG = false;
 
+    /* TODO: This is no more used with the hostapd code. Clean up */
+    private static final String SOFTAP_IFACE = "wl0.1";
+
     private WifiMonitor mWifiMonitor;
     private WifiNative mWifiNative;
     private WifiConfigStore mWifiConfigStore;
@@ -2473,12 +2484,12 @@ public class WifiStateMachine extends StateMachine {
         new Thread(new Runnable() {
             public void run() {
                 try {
-                    mNwService.startAccessPoint(config, mInterfaceName);
+                    mNwService.startAccessPoint(config, mInterfaceName, SOFTAP_IFACE);
                 } catch (Exception e) {
                     loge("Exception in softap start " + e);
                     try {
                         mNwService.stopAccessPoint(mInterfaceName);
-                        mNwService.startAccessPoint(config, mInterfaceName);
+                        mNwService.startAccessPoint(config, mInterfaceName, SOFTAP_IFACE);
                     } catch (Exception e1) {
                         loge("Exception in softap re-start " + e1);
                         sendMessage(CMD_START_AP_FAILURE);

project system/netd/
diff --git a/system/netd/CommandListener.cpp b/system/netd/CommandListener.cpp
index 3b8d30e..d530208 100644
--- a/system/netd/CommandListener.cpp
+++ b/system/netd/CommandListener.cpp
@@ -1064,7 +1064,11 @@ int CommandListener::SoftapCmd::runCommand(SocketClient *cli,
         return 0;
     }
 
-    if (!strcmp(argv[1], "startap")) {
+    if (!strcmp(argv[1], "start")) {
+        rc = sSoftapCtrl->startDriver(argv[2]);
+    } else if (!strcmp(argv[1], "stop")) {
+        rc = sSoftapCtrl->stopDriver(argv[2]);
+    } else if (!strcmp(argv[1], "startap")) {
         rc = sSoftapCtrl->startSoftap();
     } else if (!strcmp(argv[1], "stopap")) {
         rc = sSoftapCtrl->stopSoftap();
diff --git a/system/netd/SoftapController.cpp b/system/netd/SoftapController.cpp
index 376c68b..501bd94 100644
--- a/system/netd/SoftapController.cpp
+++ b/system/netd/SoftapController.cpp
@@ -50,37 +50,175 @@ static const char HOSTAPD_CONF_FILE[]    = "/data/misc/wifi/hostapd.conf";
 static const char HOSTAPD_BIN_FILE[]    = "/system/bin/hostapd";
 
 SoftapController::SoftapController()
-    : mPid(0) {}
+    : mPid(0) {
+    mSock = socket(AF_INET, SOCK_DGRAM, 0);
+    if (mSock < 0)
+        ALOGE("Failed to open socket");
+    memset(mIface, 0, sizeof(mIface));
+}
 
 SoftapController::~SoftapController() {
+    if (mSock >= 0)
+        close(mSock);
+}
+
+int SoftapController::setCommand(char *iface, const char *fname, unsigned buflen) {
+#ifdef HAVE_HOSTAPD
+    return 0;
+#else
+    char tBuf[SOFTAP_MAX_BUFFER_SIZE];
+    struct iwreq wrq;
+    struct iw_priv_args *priv_ptr;
+    int i, j, ret;
+    int cmd = 0, sub_cmd = 0;
+
+    strncpy(wrq.ifr_name, iface, sizeof(wrq.ifr_name));
+    wrq.u.data.pointer = tBuf;
+    wrq.u.data.length = sizeof(tBuf) / sizeof(struct iw_priv_args);
+    wrq.u.data.flags = 0;
+    if ((ret = ioctl(mSock, SIOCGIWPRIV, &wrq)) < 0) {
+        ALOGE("SIOCGIPRIV failed: %d", ret);
+        return ret;
+    }
+
+    priv_ptr = (struct iw_priv_args *)wrq.u.data.pointer;
+    for(i=0; i < wrq.u.data.length;i++) {
+        if (strcmp(priv_ptr[i].name, fname) == 0) {
+            cmd = priv_ptr[i].cmd;
+            break;
+        }
+    }
+
+    if (i == wrq.u.data.length) {
+        ALOGE("iface:%s, fname: %s - function not supported", iface, fname);
+        return -1;
+    }
+
+    if (cmd < SIOCDEVPRIVATE) {
+        for(j=0; j < i; j++) {
+            if ((priv_ptr[j].set_args == priv_ptr[i].set_args) &&
+                (priv_ptr[j].get_args == priv_ptr[i].get_args) &&
+                (priv_ptr[j].name[0] == '\0'))
+                break;
+        }
+        if (j == i) {
+            ALOGE("iface:%s, fname: %s - invalid private ioctl", iface, fname);
+            return -1;
+        }
+        sub_cmd = cmd;
+        cmd = priv_ptr[j].cmd;
+    }
+
+    strncpy(wrq.ifr_name, iface, sizeof(wrq.ifr_name));
+    if ((buflen == 0) && (*mBuf != 0))
+        wrq.u.data.length = strlen(mBuf) + 1;
+    else
+        wrq.u.data.length = buflen;
+    wrq.u.data.pointer = mBuf;
+    wrq.u.data.flags = sub_cmd;
+    ret = ioctl(mSock, cmd, &wrq);
+    return ret;
+#endif
+}
+
+int SoftapController::startDriver(char *iface) {
+    int ret;
+
+    if (mSock < 0) {
+        ALOGE("Softap driver start - failed to open socket");
+        return ResponseCode::OperationFailed;
+    }
+    if (!iface || (iface[0] == '\0')) {
+        ALOGD("Softap driver start - wrong interface");
+        iface = mIface;
+    }
+
+    *mBuf = 0;
+    ret = setCommand(iface, "START");
+    if (ret < 0) {
+        ALOGE("Softap driver start: %d", ret);
+        return ResponseCode::ServiceStartFailed;
+    }
+#ifdef HAVE_HOSTAPD
+    ifc_init();
+    ret = ifc_up(iface);
+    ifc_close();
+#endif
+    usleep(AP_DRIVER_START_DELAY);
+    ALOGD("Softap driver start: %d", ret);
+    return ResponseCode::SoftapStatusResult;
+}
+
+int SoftapController::stopDriver(char *iface) {
+    int ret;
+
+    if (mSock < 0) {
+        ALOGE("Softap driver stop - failed to open socket");
+        return ResponseCode::OperationFailed;
+    }
+    if (!iface || (iface[0] == '\0')) {
+        ALOGD("Softap driver stop - wrong interface");
+        iface = mIface;
+    }
+    *mBuf = 0;
+#ifdef HAVE_HOSTAPD
+    ifc_init();
+    ret = ifc_down(iface);
+    ifc_close();
+    if (ret < 0) {
+        ALOGE("Softap %s down: %d", iface, ret);
+    }
+#endif
+    ret = setCommand(iface, "STOP");
+    ALOGD("Softap driver stop: %d", ret);
+    return ResponseCode::SoftapStatusResult;
 }
 
 int SoftapController::startSoftap() {
     pid_t pid = 1;
+    int ret = 0;
 
     if (mPid) {
         ALOGE("SoftAP is already running");
         return ResponseCode::SoftapStatusResult;
     }
-
+    if (mSock < 0) {
+        ALOGE("Softap startap - failed to open socket");
+        return ResponseCode::OperationFailed;
+    }
+#ifdef HAVE_HOSTAPD
     if ((pid = fork()) < 0) {
         ALOGE("fork failed (%s)", strerror(errno));
         return ResponseCode::ServiceStartFailed;
     }
-
+#endif
     if (!pid) {
+#ifdef HAVE_HOSTAPD
+#ifndef HOSTAPD_NO_ENTROPY
         ensure_entropy_file_exists();
+#endif
         if (execl(HOSTAPD_BIN_FILE, HOSTAPD_BIN_FILE,
+#ifndef HOSTAPD_NO_ENTROPY
                   "-e", WIFI_ENTROPY_FILE,
+#endif
                   HOSTAPD_CONF_FILE, (char *) NULL)) {
             ALOGE("execl failed (%s)", strerror(errno));
         }
+#endif
         ALOGE("SoftAP failed to start");
         return ResponseCode::ServiceStartFailed;
     } else {
-        mPid = pid;
-        ALOGD("SoftAP started successfully");
-        usleep(AP_BSS_START_DELAY);
+        *mBuf = 0;
+        ret = setCommand(mIface, "AP_BSS_START");
+        if (ret) {
+            ALOGE("Softap startap - failed: %d", ret);
+			return ResponseCode::ServiceStartFailed;
+        }
+        else {
+           mPid = pid;
+           ALOGD("SoftAP started successfully");
+           usleep(AP_BSS_START_DELAY);
+        }
     }
     return ResponseCode::SoftapStatusResult;
 }
@@ -92,10 +230,17 @@ int SoftapController::stopSoftap() {
         return ResponseCode::SoftapStatusResult;
     }
 
+#ifdef HAVE_HOSTAPD
     ALOGD("Stopping the SoftAP service...");
     kill(mPid, SIGTERM);
     waitpid(mPid, NULL, 0);
-
+#endif
+    if (mSock < 0) {
+        ALOGE("Softap stopap - failed to open socket");
+        return ResponseCode::OperationFailed;
+    }
+    *mBuf = 0;
+    setCommand(mIface, "AP_BSS_STOP");
     mPid = 0;
     ALOGD("SoftAP stopped successfully");
     usleep(AP_BSS_STOP_DELAY);
@@ -106,34 +251,65 @@ bool SoftapController::isSoftapStarted() {
     return (mPid != 0);
 }
 
+int SoftapController::addParam(int pos, const char *cmd, const char *arg)
+{
+    if (pos < 0)
+        return pos;
+    if ((unsigned)(pos + strlen(cmd) + strlen(arg) + 1) >= sizeof(mBuf)) {
+        ALOGE("Command line is too big");
+        return -1;
+    }
+    pos += sprintf(&mBuf[pos], "%s=%s,", cmd, arg);
+    return pos;
+}
+
 /*
  * Arguments:
  *  argv[2] - wlan interface
- *  argv[3] - SSID
- *  argv[4] - Broadcast/Hidden
- *  argv[5] - Channel
- *  argv[6] - Security
- *  argv[7] - Key
+ *  argv[3] - softap interface
+ *  argv[4] - SSID
+ *  argv[5] - Broadcast/Hidden
+ *  argv[6] - Channel
+ *  argv[7] - Security
+ *  argv[8] - Key
+ * the following argv may missing
+ *	argv[9] - Preamble
+ *	argv[10] - Max SCB
  */
 int SoftapController::setSoftap(int argc, char *argv[]) {
     char psk_str[2*SHA256_DIGEST_LENGTH+1];
     int ret = ResponseCode::SoftapStatusResult;
     int i = 0;
+    char *ssid, *iface;
     int fd;
     int hidden = 0;
     int channel = AP_CHANNEL_DEFAULT;
     char *wbuf = NULL;
     char *fbuf = NULL;
 
+    if (mSock < 0) {
+        ALOGE("Softap set - failed to open socket");
+        return ResponseCode::OperationFailed;
+    }
     if (argc < 5) {
         ALOGE("Softap set is missing arguments. Please use:");
         ALOGE("softap <wlan iface> <SSID> <hidden/broadcast> <channel> <wpa2?-psk|open> <passphrase>");
         return ResponseCode::CommandSyntaxError;
     }
 
-    if (!strcasecmp(argv[4], "hidden"))
+    strncpy(mIface, argv[3], sizeof(mIface));
+    iface = argv[2];
+
+#ifdef HAVE_HOSTAPD
+    if (!strcasecmp(argv[5], "hidden"))
         hidden = 1;
 
+    if (argc > 4) {
+        ssid = argv[4];
+    } else {
+        ssid = (char *)"AndroidAP";
+    }
+
     if (argc >= 5) {
         channel = atoi(argv[5]);
         if (channel <= 0)
@@ -143,16 +319,16 @@ int SoftapController::setSoftap(int argc, char *argv[]) {
     asprintf(&wbuf, "interface=%s\ndriver=" HOSTAPD_DRIVER_NAME "\nctrl_interface="
             "/data/misc/wifi/hostapd\nssid=%s\nchannel=%d\nieee80211n=1\n"
             "hw_mode=g\nignore_broadcast_ssid=%d\n",
-            argv[2], argv[3], channel, hidden);
+            iface, ssid, channel, hidden);
 
     if (argc > 7) {
-        if (!strcmp(argv[6], "wpa-psk")) {
-            generatePsk(argv[3], argv[7], psk_str);
+        if (!strcmp(argv[7], "wpa-psk")) {
+            generatePsk(ssid, argv[8], psk_str);
             asprintf(&fbuf, "%swpa=1\nwpa_pairwise=TKIP CCMP\nwpa_psk=%s\n", wbuf, psk_str);
-        } else if (!strcmp(argv[6], "wpa2-psk")) {
-            generatePsk(argv[3], argv[7], psk_str);
+        } else if (!strcmp(argv[7], "wpa2-psk")) {
+            generatePsk(ssid, argv[8], psk_str);
             asprintf(&fbuf, "%swpa=2\nrsn_pairwise=CCMP\nwpa_psk=%s\n", wbuf, psk_str);
-        } else if (!strcmp(argv[6], "open")) {
+        } else if (!strcmp(argv[7], "open")) {
             asprintf(&fbuf, "%s", wbuf);
         }
     } else if (argc > 6) {
@@ -193,8 +369,59 @@ int SoftapController::setSoftap(int argc, char *argv[]) {
         unlink(HOSTAPD_CONF_FILE);
         return ResponseCode::OperationFailed;
     }
-
     close(fd);
+#else
+    /* Create command line */
+    i = addParam(i, "ASCII_CMD", "AP_CFG");
+    if (argc > 4) {
+        ssid = argv[4];
+    } else {
+        ssid = (char *)"AndroidAP";
+    }
+    i = addParam(i, "SSID", ssid);
+    if (argc > 7) {
+        i = addParam(i, "SEC", argv[7]);
+    } else {
+        i = addParam(i, "SEC", "open");
+    }
+    if (argc > 8) {
+        generatePsk(ssid, argv[8], psk_str);
+        i = addParam(i, "KEY", psk_str);
+    } else {
+        i = addParam(i, "KEY", "12345678");
+    }
+    if (argc > 6) {
+        i = addParam(i, "CHANNEL", argv[6]);
+    } else {
+        i = addParam(i, "CHANNEL", "6");
+    }
+    if (argc > 9) {
+        i = addParam(i, "PREAMBLE", argv[9]);
+    } else {
+        i = addParam(i, "PREAMBLE", "0");
+    }
+    if (argc > 10) {
+        i = addParam(i, "MAX_SCB", argv[10]);
+    } else {
+        i = addParam(i, "MAX_SCB", "8");
+    }
+    if ((i < 0) || ((unsigned)(i + 4) >= sizeof(mBuf))) {
+        ALOGE("Softap set - command is too big");
+        return ResponseCode::OperationFailed;
+    }
+    sprintf(&mBuf[i], "END");
+
+    /* system("iwpriv eth0 WL_AP_CFG ASCII_CMD=AP_CFG,SSID=\"AndroidAP\",SEC=\"open\",KEY=12345,CHANNEL=1,PREAMBLE=0,MAX_SCB=8,END"); */
+    ret = setCommand(iface, "AP_SET_CFG");
+    if (ret) {
+        ALOGE("Softap set - failed: %d", ret);
+		ret = ResponseCode::ServiceStartFailed;
+    }
+    else {
+        ALOGD("Softap set - Ok");
+        usleep(AP_SET_CFG_DELAY);
+    }
+#endif
     return ret;
 }
 
@@ -206,13 +433,20 @@ int SoftapController::setSoftap(int argc, char *argv[]) {
 int SoftapController::fwReloadSoftap(int argc, char *argv[])
 {
     int i = 0;
+    char *iface;
     char *fwpath = NULL;
 
+    if (mSock < 0) {
+        ALOGE("Softap fwrealod - failed to open socket");
+        return ResponseCode::OperationFailed;
+    }
     if (argc < 4) {
         ALOGE("SoftAP fwreload is missing arguments. Please use: softap <wlan iface> <AP|P2P|STA>");
         return ResponseCode::CommandSyntaxError;
     }
 
+    iface = argv[2];
+
     if (strcmp(argv[3], "AP") == 0) {
         fwpath = (char *)wifi_get_fw_path(WIFI_GET_FW_PATH_AP);
     } else if (strcmp(argv[3], "P2P") == 0) {
@@ -222,7 +456,12 @@ int SoftapController::fwReloadSoftap(int argc, char *argv[])
     }
     if (!fwpath)
         return ResponseCode::CommandParameterError;
+#ifdef HAVE_HOSTAPD
     if (wifi_change_fw_path((const char *)fwpath)) {
+#else
+    sprintf(mBuf, "FW_PATH=%s", fwpath);
+    if (setCommand(iface, "WL_FW_RELOAD")) {
+#endif
         ALOGE("Softap fwReload failed");
         return ResponseCode::OperationFailed;
     }
diff --git a/system/netd/SoftapController.h b/system/netd/SoftapController.h
index 7063067..5d1d921 100644
--- a/system/netd/SoftapController.h
+++ b/system/netd/SoftapController.h
@@ -32,13 +32,21 @@ public:
     SoftapController();
     virtual ~SoftapController();
 
+    int startDriver(char *iface);
+    int stopDriver(char *iface);
     int startSoftap();
     int stopSoftap();
     bool isSoftapStarted();
     int setSoftap(int argc, char *argv[]);
     int fwReloadSoftap(int argc, char *argv[]);
 private:
+    char mBuf[SOFTAP_MAX_BUFFER_SIZE];
+    char mIface[IFNAMSIZ];
     pid_t mPid;
+    int mSock;
+
+    int addParam(int pos, const char *cmd, const char *arg);
+    int setCommand(char *iface, const char *fname, unsigned buflen=0);
     void generatePsk(char *ssid, char *passphrase, char *psk);
 };
 
