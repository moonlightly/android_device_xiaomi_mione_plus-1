
project external/wpa_supplicant_8/
diff --git a/external/wpa_supplicant_8/src/drivers/android_drv.h b/external/wpa_supplicant_8/src/drivers/android_drv.h
index 5906527..6df7160 100644
--- a/external/wpa_supplicant_8/src/drivers/android_drv.h
+++ b/external/wpa_supplicant_8/src/drivers/android_drv.h
@@ -14,6 +14,8 @@
 
 #define WPA_EVENT_DRIVER_STATE "CTRL-EVENT-DRIVER-STATE "
 
+#define WEXT_CSCAN_AMOUNT		9
+
 #define MAX_SSID_LEN 32
 
 #define MAX_DRV_CMD_SIZE		248
diff --git a/external/wpa_supplicant_8/src/drivers/driver_wext.c b/external/wpa_supplicant_8/src/drivers/driver_wext.c
index e095bd4..ef18f8b 100644
--- a/external/wpa_supplicant_8/src/drivers/driver_wext.c
+++ b/external/wpa_supplicant_8/src/drivers/driver_wext.c
@@ -43,6 +43,8 @@ static int wpa_driver_wext_set_auth_alg(void *priv, int auth_alg);
 #ifdef ANDROID
 extern int wpa_driver_wext_driver_cmd(void *priv, char *cmd, char *buf,
                                        size_t buf_len);
+extern int wpa_driver_wext_combo_scan(void *priv,
+					struct wpa_driver_scan_params *params);
 extern int wpa_driver_signal_poll(void *priv, struct wpa_signal_info *si);
 #endif
 
@@ -1029,6 +1031,13 @@ int wpa_driver_wext_scan(void *priv, struct wpa_driver_scan_params *params)
 	const u8 *ssid = params->ssids[0].ssid;
 	size_t ssid_len = params->ssids[0].ssid_len;
 
+#ifdef ANDROID
+	if (drv->capa.max_scan_ssids > 1) {
+		ret = wpa_driver_wext_combo_scan(priv, params);
+		goto scan_out;
+	}
+#endif
+
 	if (ssid_len > IW_ESSID_MAX_SIZE) {
 		wpa_printf(MSG_DEBUG, "%s: too long SSID (%lu)",
 			   __FUNCTION__, (unsigned long) ssid_len);
@@ -1054,6 +1063,9 @@ int wpa_driver_wext_scan(void *priv, struct wpa_driver_scan_params *params)
 		ret = -1;
 	}
 
+#ifdef ANDROID
+scan_out:
+#endif
 	/* Not all drivers generate "scan completed" wireless event, so try to
 	 * read results after a timeout. */
 	timeout = 10;
@@ -1588,7 +1600,11 @@ static int wpa_driver_wext_get_range(void *priv)
 		drv->capa.auth = WPA_DRIVER_AUTH_OPEN |
 			WPA_DRIVER_AUTH_SHARED |
 			WPA_DRIVER_AUTH_LEAP;
+#ifdef ANDROID
+		drv->capa.max_scan_ssids = WEXT_CSCAN_AMOUNT;
+#else
 		drv->capa.max_scan_ssids = 1;
+#endif
 
 		wpa_printf(MSG_DEBUG, "  capabilities: key_mgmt 0x%x enc 0x%x "
 			   "flags 0x%x",
diff --git a/external/wpa_supplicant_8/wpa_supplicant/android.config b/external/wpa_supplicant_8/wpa_supplicant/android.config
index b2c2c23..c1dea30 100644
--- a/external/wpa_supplicant_8/wpa_supplicant/android.config
+++ b/external/wpa_supplicant_8/wpa_supplicant/android.config
@@ -325,7 +325,7 @@ CONFIG_PEERKEY=y
 
 # IEEE 802.11w (management frame protection), also known as PMF
 # Driver support is also needed for IEEE 802.11w.
-CONFIG_IEEE80211W=y
+#CONFIG_IEEE80211W=y
 
 # Select TLS implementation
 # openssl = OpenSSL (default)
